const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};
const generationConfig2 = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for Python for Exam and level of difiiculty will be Easy with summary of course, List of chapters along with summary for each chapter, Topic list in each chapter, all result  in JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "course_title": "Python for Beginners: Exam Preparation (Easy)",\n  "course_summary": "This course provides a foundational understanding of Python programming suitable for beginners. It covers basic syntax, data structures, control flow, and fundamental programming concepts. The material is designed to be easy to grasp and focuses on practical examples to aid exam preparation.",\n    "exam_difficulty": "Easy",\n  "chapters": [\n    {\n      "chapter_number": 1,\n      "chapter_title": "Introduction to Python",\n      "chapter_summary": "This chapter introduces the basics of Python, including its history, features, and setting up your development environment. It also covers basic input and output operations.",\n      "topics": [\n        "What is Python?",\n          "History of Python",\n        "Why Python is popular",\n        "Setting up Python Development Environment",\n        "Installing Python",\n        "Using a Text Editor or IDE",\n        "Running your first Python program",\n        "Basic input (using `input()`)",\n        "Basic output (using `print()`)",\n         "Comments in Python"\n      ]\n    },\n    {\n      "chapter_number": 2,\n      "chapter_title": "Variables and Data Types",\n      "chapter_summary": "This chapter delves into variables and fundamental data types, explaining how to declare variables and use different data types like integers, floats, strings, and booleans. Type conversion is also covered.",\n      "topics": [\n          "Understanding Variables",\n          "Naming Conventions",\n        "Integer data type (`int`)",\n        "Float data type (`float`)",\n        "String data type (`str`)",\n        "Boolean data type (`bool`)",\n        "Type conversion (casting)"\n      ]\n    },\n    {\n      "chapter_number": 3,\n      "chapter_title": "Operators in Python",\n      "chapter_summary": "This chapter explains the various operators used in Python, including arithmetic, comparison, and logical operators. Understanding these operators is essential for writing basic expressions.",\n      "topics": [\n        "Arithmetic operators (+, -, *, /, %, //, **)",\n        "Comparison operators (==, !=, >, <, >=, <=)",\n        "Logical operators (and, or, not)",\n        "Operator precedence"\n      ]\n    },\n    {\n      "chapter_number": 4,\n      "chapter_title": "Control Flow: Conditional Statements",\n      "chapter_summary": "This chapter introduces conditional statements, including `if`, `elif`, and `else`. It helps you to control the flow of your program based on conditions.",\n      "topics": [\n        "The `if` statement",\n        "The `if-else` statement",\n        "The `if-elif-else` statement",\n        "Nested `if` statements"\n      ]\n    },\n      {\n      "chapter_number": 5,\n      "chapter_title": "Control Flow: Loops",\n      "chapter_summary": "This chapter introduces loop constructs in Python, specifically the `for` and `while` loops. These are essential for performing repetitive tasks efficiently.",\n      "topics": [\n        "The `for` loop",\n        "Looping through sequences (e.g., strings, lists)",\n          "The `range()` function",\n        "The `while` loop",\n           "Loop Control Statements (break, continue)",\n        "Infinite Loops (and how to avoid them)"\n      ]\n    },\n    {\n      "chapter_number": 6,\n      "chapter_title": "Introduction to Lists",\n      "chapter_summary": "This chapter introduces the list data structure in Python, including how to create, access, modify, and iterate through list items. Basic list operations are covered.",\n     "topics": [\n        "Creating lists",\n        "Accessing elements using index",\n        "Modifying list elements",\n        "Adding elements (append, insert)",\n        "Removing elements (remove, pop)",\n         "List slicing",\n        "Looping through lists"\n\n      ]\n    },\n    {\n      "chapter_number": 7,\n      "chapter_title": "Basic Functions",\n      "chapter_summary": "This chapter introduces basic functions, including how to define, call, and pass arguments. It emphasizes the importance of code organization and reusability using functions.",\n       "topics":[\n        "Defining functions using `def`",\n        "Calling functions",\n        "Passing arguments to functions",\n        "Returning values from functions",\n           "Function scope (local vs global)",\n         "Built-in functions"\n      ]\n    }\n  ]\n}\n```\n',
        },
      ],
    },
  ],
});


export const generateNotesAIModel = model.startChat({
    generationConfig2,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate exam material detailed content for ech chapter, Make sure to include all topic in the content, make sure to give content in HTML format (Do not Add HTML, Head,Body,title tag), The chapters :{\n \"chapter_title\": \"BST Validation and Properties Check ✅\",\n      \"chapter_summary\": \"This chapter includes problems related to checking if a given binary tree is a valid BST. This involves verifying the BST properties for all nodes in the tree.\",\n      \"topics\": [\n        \"Checking if a binary tree is a valid BST\",\n        \"Checking BST Property for each node.\",\n        \"Range constraints for nodes in subtrees\",\n        \"Using Inorder Traversal for Validation\",\n        \"Finding Minimum and Maximum element in BST\",\n        \"Finding the Kth Smallest Element\",\n        \"Finding the Kth Largest Element\"\n      ]\n}. Make sure to provide answer to all the questions in content\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```html\n<div class=\"chapter\">\n    <h2>Chapter: BST Validation and Properties Check ✅</h2>\n    <p><strong>Chapter Summary:</strong> This chapter includes problems related to checking if a given binary tree is a valid BST. This involves verifying the BST properties for all nodes in the tree.</p>\n\n    <div class=\"topic\">\n        <h3>Checking if a Binary Tree is a Valid BST</h3>\n        <p><strong>Concept:</strong>  A Binary Search Tree (BST) has the property that for each node, all nodes in its left subtree have values less than the node's value, and all nodes in its right subtree have values greater than the node's value. This must hold true for all nodes in the tree.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Given the root of a binary tree, determine if it is a valid binary search tree (BST).\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: root = [2,1,3]\n                    Output: true\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                    def isValidBST(root):\n                        def validate(node, low=-float('inf'), high=float('inf')):\n                            if not node:\n                                return True\n\n                            if node.val <= low or node.val >= high:\n                                return False\n\n                            return (validate(node.left, low, node.val) and\n                                    validate(node.right, node.val, high))\n\n                        return validate(root)\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong> Explain the difference between a binary tree and a binary search tree.\n                <p><strong>Answer:</strong></p>\n                <p>A binary tree is a tree data structure where each node has at most two children, which are referred to as the left child and the right child. A binary search tree is a binary tree with the following properties:</p>\n                <ul>\n                    <li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n                    <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n                    <li>Both the left and right subtrees must also be binary search trees.</li>\n                </ul>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"topic\">\n        <h3>Checking BST Property for Each Node</h3>\n        <p><strong>Concept:</strong>  For each node, ensure that its value falls within a defined range. The range is determined by the values of its ancestors. Nodes to the left have an upper bound, and nodes to the right have a lower bound.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Write a function to check if the BST property holds true for a given node and its immediate children.\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: node = [5, 3, 7], low = None, high = None\n                    Output: True (Assuming 3 &lt; 5 &lt; 7)\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                    def check_bst_property(node, low=None, high=None):\n                        if not node:\n                            return True\n\n                        if low is not None and node.val <= low:\n                            return False\n                        if high is not None and node.val >= high:\n                            return False\n\n                        return True\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong>  What are the potential drawbacks of checking the BST property only for immediate children of each node?\n                <p><strong>Answer:</strong></p>\n                <p>Checking only the immediate children of a node does not guarantee that the entire tree is a valid BST. A node might satisfy the BST property with its immediate children but violate it with nodes deeper in its subtrees. For example, a node in the right subtree might have a value less than the root node, which would invalidate the BST.</p>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"topic\">\n        <h3>Range Constraints for Nodes in Subtrees</h3>\n        <p><strong>Concept:</strong>  Nodes in the left subtree of a given node must be within a range (-infinity, node.value), and nodes in the right subtree must be within a range (node.value, +infinity).  These constraints are essential for maintaining the BST property.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong>  Given a node with value 'X', what are the valid value ranges for nodes in its left and right subtrees if the tree is a valid BST?\n                <p><strong>Answer:</strong></p>\n                <p>For a node with value 'X':</p>\n                <ul>\n                    <li>Left Subtree: The values must be less than 'X'. The range is (-infinity, X).</li>\n                    <li>Right Subtree: The values must be greater than 'X'. The range is (X, +infinity).</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Question 2:</strong>  Explain how range constraints are used recursively to validate a BST.\n                <p><strong>Answer:</strong></p>\n                <p>Range constraints are used recursively to validate a BST by passing down the upper and lower bounds as parameters in the recursive calls. For the left subtree, the upper bound becomes the current node's value, and the lower bound remains the same. For the right subtree, the lower bound becomes the current node's value, and the upper bound remains the same. At each node, we check if the node's value is within the current range. If it's outside the range, the tree is not a valid BST. This process continues until all nodes have been validated, ensuring that each node satisfies the BST property within its subtree.</p>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"topic\">\n        <h3>Using Inorder Traversal for Validation</h3>\n        <p><strong>Concept:</strong> Inorder traversal visits nodes in ascending order in a BST. If the inorder traversal of a tree results in a sorted sequence, the tree is a valid BST.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Write a function to perform an inorder traversal of a binary tree and check if the resulting sequence is sorted in ascending order.\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: root = [2,1,3]\n                    Output: True\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                    def is_valid_bst_inorder(root):\n                        inorder_list = []\n                        def inorder_traversal(node):\n                            if not node:\n                                return\n                            inorder_traversal(node.left)\n                            inorder_list.append(node.val)\n                            inorder_traversal(node.right)\n\n                        inorder_traversal(root)\n\n                        for i in range(1, len(inorder_list)):\n                            if inorder_list[i] <= inorder_list[i-1]:\n                                return False\n                        return True\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong> Explain how inorder traversal can be used to efficiently validate a BST.\n                 <p><strong>Answer:</strong></p>\n                <p>Inorder traversal can efficiently validate a BST because it visits the nodes in ascending order if the tree is a valid BST. By keeping track of the previously visited node's value, we can check if the current node's value is greater than the previous one. If it is, the tree is potentially a valid BST. If the current node's value is less than or equal to the previous one, the tree violates the BST property and is invalid. The efficiency comes from only needing to compare adjacent nodes in the traversal to determine validity, rather than checking against the entire subtree.</p>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"topic\">\n        <h3>Finding Minimum and Maximum Element in BST</h3>\n        <p><strong>Concept:</strong>  The minimum element in a BST is the leftmost node, and the maximum element is the rightmost node. This is because of the BST properties.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Write functions to find the minimum and maximum elements in a BST.\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n                    Output: min=1, max=9\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                    def find_minimum(root):\n                        if not root:\n                            return None\n                        while root.left:\n                            root = root.left\n                        return root.val\n\n                    def find_maximum(root):\n                        if not root:\n                            return None\n                        while root.right:\n                            root = root.right\n                        return root.val\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong> Explain the time complexity of finding the minimum and maximum elements in a BST.\n                 <p><strong>Answer:</strong></p>\n                 <p>The time complexity of finding the minimum and maximum elements in a BST is O(h), where h is the height of the tree. In the worst case (e.g., a skewed tree), h can be n, where n is the number of nodes in the tree, resulting in a time complexity of O(n). However, in a balanced BST, h is log(n), resulting in a time complexity of O(log n).</p>\n            </li>\n        </ol>\n    </div>\n\n    <div class=\"topic\">\n        <h3>Finding the Kth Smallest Element</h3>\n        <p><strong>Concept:</strong>  The Kth smallest element can be found by performing an inorder traversal of the BST and keeping track of the number of visited nodes. When the number of visited nodes equals K, the current node is the Kth smallest element.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Write a function to find the Kth smallest element in a BST.\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9], k = 3\n                    Output: 3\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                    def kth_smallest(root, k):\n                        count = 0\n                        result = None\n\n                        def inorder(node):\n                            nonlocal count, result\n                            if not node:\n                                return\n\n                            inorder(node.left)\n                            count += 1\n                            if count == k:\n                                result = node.val\n                                return\n                            inorder(node.right)\n\n                        inorder(root)\n                        return result\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong> What are the different approaches to find Kth smallest element in BST? What are their complexity?\n                 <p><strong>Answer:</strong></p>\n                 <p>Approaches to find Kth smallest element:</p>\n                 <ul>\n                    <li><strong>Inorder Traversal:</strong> Perform an inorder traversal and stop when you reach the Kth node. Complexity is O(N) where N is the number of nodes in the tree.</li>\n                    <li><strong>Augmented Tree Data Structure:</strong> Store the size of each subtree in each node. Use this information to navigate to the Kth smallest node. Complexity O(H) where H is the height of tree and can be log(N) in balanced and N in unbalanced tree.</li>\n                 </ul>\n            </li>\n        </ol>\n    </div>\n\n      <div class=\"topic\">\n        <h3>Finding the Kth Largest Element</h3>\n        <p><strong>Concept:</strong>  The Kth largest element can be found by performing a reverse inorder traversal (right, node, left) of the BST and keeping track of the number of visited nodes. When the number of visited nodes equals K, the current node is the Kth largest element.</p>\n        <p><strong>Exam Style Questions:</strong></p>\n        <ol>\n            <li>\n                <strong>Question 1:</strong> Write a function to find the Kth largest element in a BST.\n                <p><strong>Example:</strong></p>\n                <pre>\n                    Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9], k = 3\n                    Output: 6\n                </pre>\n                <p><strong>Answer:</strong></p>\n                <pre>\n                <code>\n                   def kth_largest(root, k):\n                        count = 0\n                        result = None\n\n                        def reverse_inorder(node):\n                            nonlocal count, result\n                            if not node:\n                                return\n\n                            reverse_inorder(node.right)\n                            count += 1\n                            if count == k:\n                                result = node.val\n                                return\n                            reverse_inorder(node.left)\n\n                        reverse_inorder(root)\n                        return result\n                </code>\n                </pre>\n            </li>\n            <li>\n                <strong>Question 2:</strong> Can you modify the BST data structure to find the kth largest efficiently?\n                 <p><strong>Answer:</strong></p>\n                 <p>Yes, we can modify the BST data structure by storing the size of each subtree in each node. This allows us to navigate directly to the kth largest node in O(h) time, where h is the height of the tree.</p>\n            </li>\n        </ol>\n    </div>\n</div>\n```"},
        ],
      },
    ],
  });



export const GenerateStudyTypeContentAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate the flashcard on topic: Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation in JSON format with front back content, Maximum 15"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"front\": \"What is Flutter's UI built upon?\",\n    \"back\": \"Widgets. Everything in Flutter is a widget, from buttons to layouts.\"\n  },\n  {\n    \"front\": \"What is the difference between StatelessWidget and StatefulWidget?\",\n    \"back\": \"StatelessWidget: Immutable. Does not change its state. StatefulWidget: Dynamic. Can change its state during runtime.\"\n  },\n  {\n    \"front\": \"What does 'BuildContext' provide?\",\n    \"back\": \"Access to the location of a Widget in the Widget tree. Provides information about the current build process.\"\n  },\n  {\n    \"front\": \"What is the purpose of the 'pubspec.yaml' file?\",\n    \"back\": \"It is the configuration file for your Flutter project, containing dependencies, assets, and project metadata.\"\n  },\n  {\n    \"front\": \"What is the 'Column' widget used for?\",\n    \"back\": \"Arranging widgets vertically, one below the other.\"\n  },\n  {\n    \"front\": \"What is the 'Row' widget used for?\",\n    \"back\": \"Arranging widgets horizontally, side by side.\"\n  },\n  {\n    \"front\": \"How do you add padding around a widget?\",\n    \"back\": \"Use the 'Padding' widget.  Specify 'padding: EdgeInsets.all(value)' or similar.\"\n  },\n  {\n    \"front\": \"How do you center a widget?\",\n    \"back\": \"Use the 'Center' widget. Wrap the widget you want to center within a 'Center' widget.\"\n  },\n  {\n    \"front\": \"What is the purpose of the 'Scaffold' widget?\",\n    \"back\": \"Provides the basic visual structure for a Material Design app, including an AppBar, Body, FloatingActionButton, etc.\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Using the 'Navigator' class. `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()));`\"\n  },\n  {\n    \"front\": \"What is a named route?\",\n    \"back\": \"A route identified by a string name.  Useful for complex navigation schemes. Defined in `routes:` in `MaterialApp`.\"\n  },\n  {\n    \"front\": \"What does 'Navigator.pop(context)' do?\",\n    \"back\": \"Removes the current route from the navigation stack and returns to the previous screen.\"\n  },\n  {\n    \"front\": \"How to handle user tap events?\",\n    \"back\": \"Wrap widget with `GestureDetector` or `InkWell`. Use `onTap` property.\"\n  },\n  {\n    \"front\": \"What is the 'mainAxisAlignment' property in Row/Column for?\",\n    \"back\": \"Controls how the children are placed along the main axis (horizontally for Row, vertically for Column).\"\n  },\n  {\n    \"front\": \"What is the 'crossAxisAlignment' property in Row/Column for?\",\n    \"back\": \"Controls how the children are aligned in cross axis (vertically for Row, horizontally for Column).\"\n  }\n]\n```"},
      ],
    },
  ],
});


export const GenerateQuizAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate Quiz on topic: Express.js Framework with Question and Options along with correct answer in JSON format, (Max 10)"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n[\n  {\n    \"question\": \"What is Express.js?\",\n    \"options\": [\n      \"A front-end JavaScript framework\",\n      \"A Node.js web application framework\",\n      \"A database management system\",\n      \"A programming language\"\n    ],\n    \"answer\": \"A Node.js web application framework\"\n  },\n  {\n    \"question\": \"Which of the following is the correct way to install Express.js?\",\n    \"options\": [\n      \"npm install express\",\n      \"yarn add express\",\n      \"Both A and B\",\n      \"None of the above\"\n    ],\n    \"answer\": \"Both A and B\"\n  },\n  {\n    \"question\": \"What is middleware in Express.js?\",\n    \"options\": [\n      \"A database connection\",\n      \"Functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle.\",\n      \"A way to define routes\",\n      \"A type of JavaScript file\"\n    ],\n    \"answer\": \"Functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle.\"\n  },\n  {\n    \"question\": \"Which method is used to define a GET route in Express.js?\",\n    \"options\": [\n      \"app.post()\",\n      \"app.put()\",\n      \"app.get()\",\n      \"app.delete()\"\n    ],\n    \"answer\": \"app.get()\"\n  },\n  {\n    \"question\": \"What does `req.params` contain in Express.js?\",\n    \"options\": [\n      \"Data sent in the request body\",\n      \"Data sent in the query string\",\n      \"Route parameters in the URL\",\n      \"Cookies sent with the request\"\n    ],\n    \"answer\": \"Route parameters in the URL\"\n  },\n  {\n    \"question\": \"How do you send a JSON response in Express.js?\",\n    \"options\": [\n      \"res.send()\",\n      \"res.render()\",\n      \"res.json()\",\n      \"res.write()\"\n    ],\n    \"answer\": \"res.json()\"\n  },\n  {\n    \"question\": \"What is the purpose of `app.use()` in Express.js?\",\n    \"options\": [\n      \"To define a GET route\",\n      \"To register middleware\",\n      \"To send a response\",\n      \"To define a POST route\"\n    ],\n    \"answer\": \"To register middleware\"\n  },\n  {\n    \"question\": \"Which of the following is a commonly used template engine with Express.js?\",\n    \"options\": [\n      \"React\",\n      \"Angular\",\n      \"Vue\",\n      \"Pug (formerly Jade)\"\n    ],\n    \"answer\": \"Pug (formerly Jade)\"\n  },\n  {\n    \"question\": \"What is the purpose of `next()` in a middleware function?\",\n    \"options\": [\n      \"To terminate the request-response cycle\",\n      \"To send a response to the client\",\n      \"To pass control to the next middleware function in the stack\",\n      \"To restart the server\"\n    ],\n    \"answer\": \"To pass control to the next middleware function in the stack\"\n  },\n  {\n    \"question\": \"What is the purpose of the `express.static()` middleware?\",\n    \"options\": [\n      \"To serve static files like images, CSS, and JavaScript\",\n      \"To handle POST requests\",\n      \"To parse JSON data\",\n      \"To handle errors\"\n    ],\n    \"answer\": \"To serve static files like images, CSS, and JavaScript\"\n  }\n]\n```\n"},
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
